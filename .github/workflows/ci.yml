name: Continuous Integration
on:
  push:
    branches:
      - main
jobs:
  verify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v2
      - name: Setup OpenJDK
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: 'adopt'
      - name: Run gradle check
        uses: gradle/gradle-build-action@v2
        with:
          arguments: check
      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v2
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          semantic_version: 18
          extra_plugins: |
            @semantic-release/changelog@6
            @semantic-release/git@10
            @google/semantic-release-replace-plugin
    outputs:
      is_new_release: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_vesion }}
  release:
    runs-on: ubuntu-latest
    needs: verify
    if: needs.verify.outputs.is_new_release == 'true'
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v2
      - name: Setup OpenJDK
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: 'adopt'
      - name: Run gradle assemble
        uses: gradle/gradle-build-action@v2
        with:
          arguments: assemble
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: App.jar
          path: build/libs/App.jar
          if-no-files-found: error
  publish:
    runs-on: ubuntu-latest
    needs: [verify, release]
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: App.jar
          path: build/libs/App.jar
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Create ECR if not exist
        uses: int128/create-ecr-repository-action@v1
        with:
          repository: ${{ github.repository }}
      - name: Build and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ github.repository }}
          VERSION_TAG: ${{ needs.verify.outputs.new_release_version }}
          SHA_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$SHA_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY --all-tags
